manifest {
  name = 'MDHowe4/TnPrep'
  description = 'Transposon preprocessing pipeline for Mtb and other prokaryotes' 
  homePage = 'https://github.com/MDHowe4/TnPrep'
  author = 'Michael Howe'
  mainScript = 'main.nf'
  nextflowVersion = '>=22.10.6'
} 

process {
  container = 'argonaut1/tnprep:v0.2.0'
}


// include the base config file
includeConfig 'conf/base.config'


profiles {

    docker {
      docker.enabled         = true
      singularity.enabled    = false
      podman.enabled         = false
      shifter.enabled        = false
      charliecloud.enabled   = false

  }
    singularity {
      singularity.enabled    = true
      singularity.autoMounts = true
      docker.enabled         = false
      podman.enabled         = false
      shifter.enabled        = false
      charliecloud.enabled   = false
  }

// Untested with conda-based profile. Try at your own peril.
    conda {
      params.enable_conda    = true
      docker.enabled         = false
      singularity.enabled    = false
      podman.enabled         = false
      shifter.enabled        = false
      charliecloud.enabled   = false
  }

    podman {
      podman.enabled         = true
      docker.enabled         = false
      singularity.enabled    = false
      shifter.enabled        = false
      charliecloud.enabled   = false
      process.container      = 'docker.io/argonaut1/tnprep:v0.2.0'
  }
    shifter {
      shifter.enabled        = true
      docker.enabled         = false
      singularity.enabled    = false
      podman.enabled         = false
      charliecloud.enabled   = false
  }
    charliecloud {
      charliecloud.enabled   = true
      docker.enabled         = false
      singularity.enabled    = false
      podman.enabled         = false
      shifter.enabled        = false
  }
}
// This will cleanup the work directory upon finishing a run. Set this to false if troubleshooting pipeline is required.
// It will also prevent the use of the resume feature on subsequent executions of a single pipeline run.
cleanup = true

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Produce a workflow diagram  
// More info: https://www.nextflow.io/docs/latest/tracing.html#dag-visualisation
dag {
	enabled = true
	overwrite = true
	file = 'runInfo/dag.mmd'
}

// Output resource and runtime reports for a workflow run
// More info: https://www.nextflow.io/docs/latest/tracing.html
report {
	enabled = true
	overwrite = true
	file = 'runInfo/report.html'
}

timeline {
	enabled = true
	overwrite = true
	file = 'runInfo/timeline.html'
}

trace {
	enabled = true
	overwrite = true
	file = 'runInfo/trace.txt'
}

// Fail a task if any command returns non-zero exit code
shell = ['/bin/bash', '-euo', 'pipefail']

params {
    // Pipeline Options
    help = false
    input = false
    genome = false
    output = "${baseDir}/outdir"

}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}